
package chess2;

//THIS IS AN UPDATED VERSION 
public class King extends Piece{
    
    /**
     * This is the king object
     * @param boards common Board
     * @param x x coordinate
     * @param y y coordinate
     * @param id piece id
     * @param color color of piece
     */
     public King(Board boards, int x, int y, int id, char color){
        setup(boards, x,y,id,color);//uses base constructor
        setTag(id,"K",color);//tag is just for display mainly, but also used for now, once we have graphics we can transition out
    }
    
     /**
      * Checks all legal moves, processed in another method
 We use queenMoves(true,color) to check for legal moves since true is the built in break statement for kings 
 What this means is that when we have a king, its movement is the same as a queen but it can only move once for every eight directions 
 Therefore, it works the same as a queen but each loop breaks after one iteration only exploring on move in each direction allowing it to 
 work like a king 
 If the movecount is zero then we can consider castling, and to do this we check if the Board is clear 
 If it is we set the movemessage(the second parameter in addPossibleMoves to the castle+color and direction so that Piece.checkPossibleMoves() 
 can handle the move as a specific type of castling which chess can then handle  
      */
    public void checkLegalMove(){
        queenMoves(true,tag.substring(0,1));
        
        if(getMoveCount()==0){
            Piece tagRight = returnPiece(x+3,y);
            Piece tagLeft = returnPiece(x-4,y);
            String color = tag.substring(0,1);
            
            if(checkbounds(getX()+3,getY())&&!isInOpposite(color,getX()+1,getY())&&!isInCurrent(color,getX()+1, getY())&&!isInOpposite(color,getX()+2,getY())&&!isInCurrent(color,getX()+2,getY())){ 
                    {
                        System.out.println("considererrrrrrrd");
                        System.out.println(tagRight);
                            if(Integer.parseInt(tagRight.getTag().substring(4))==0){
                                String castleMessage = "castle" + color+"L";
        
                                addPossibleMoves(getX()+2,getY(),castleMessage);

                            // Chess2.boards[getX()+1][getY()] = "00000";
                            }
                        
                    }

                }
                 
                if(boards.getBoard()[getY()][getX()-1].equals("00000")&&boards.getBoard()[getY()][getX()-2].equals("00000")&&boards.getBoard()[getY()][getX()-3].equals("00000"))
                        
                        if(Integer.parseInt(tagLeft.getTag().substring(4))==0){
                            String castleMessage = "castle" + color+"R";

                            addPossibleMoves(getX()-2,getY(),castleMessage);
                        }
                }
        }
}





